name: "Multi ENV Android & Web CI/CD"

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]
  workflow_dispatch: # Manually run this workflow
  
jobs:
  CLEANING-READY:
    name: Clean Ready
    runs-on: ubuntu-latest
    environment: CLEAN
    if: |
      github.ref == 'refs/heads/master'
    steps:
      - name: Cleaning Permission okay
        run: echo "Cleaning ready"
  CLEANING:
    name: Clean ${{ matrix.environment }}
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}
    needs: CLEANING-READY
    strategy:
      matrix:
        environment:
          - TEST
          - QA
          - PROD
    steps:
      - name: Cleaning ${{ matrix.environment }} ftp server
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            [ "$(basename "$(pwd)")" = "${{ secrets.FTP_SERVER }}" ] && find . -type f -name '.*' -exec rm {} \; && find . -type d -name '.*' -exec rm -rf {} \;
            [ "$(basename "$(pwd)")" = "${{ secrets.FTP_SERVER }}" ] && rm -rf ./*
          EOF


  BUILD-WEB:
    name: Build web code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'
          
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.5'
      - run: flutter upgrade
      - run: flutter clean
      - run: flutter pub get
      - run: flutter test
      - name: Build web
        run: flutter build web --release

      - name: Create ZIP Archive
        run: |
          cd build/web
          zip -r web-release.zip .
          mv web-release.zip ../../
        working-directory: ${{ github.workspace }}

      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v3
        with:
          name: web-artifact
          path: web-release.zip


  BUILD-ANDROID:
    name: Build Android APK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'
          
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.5'
      - run: flutter upgrade
      - run: flutter clean
      - run: flutter pub get
      - run: flutter test

      - run: flutter build apk --split-per-abi

      - name: Push to Releases
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/apk/release/*"
          tag: v1.0.${{ github.run_number }}
          token: ${{ secrets.CODE_ACCESS_TOKEN_TT }}
          
      - name: Create ZIP Archive
        run: |
          cd build/app/outputs/apk/release
          zip -r apk-release.zip .
          mv apk-release.zip ../../../../../
        working-directory: ${{ github.workspace }}

      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v3
        with:
          name: apk-artifact
          path: apk-release.zip
          retention-days: 10

  DEVELOPMENT:
    name: Deploy in TEST
    runs-on: ubuntu-latest
    environment: TEST
    needs: BUILD-WEB
    steps:
      - name: Download ZIP Artifact
        uses: actions/download-artifact@v3
        with:
          name: web-artifact
          path: web-release

      - name: 📂 Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./web-release/
          exclude: |
            **/.git*
            **/.git*/**

      - name: SSH into the server and unzip web-release.zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            yes | unzip web-release.zip -d web-release
          EOF

      - name: Copy all files from web-release directory
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            rsync -av web-release/ . #recursively copy files
          EOF
          
      - name: Remove the 'web-release' directory and .zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            rm -rf web-release
            rm -rf .git
            rm web-release.zip
          EOF

  QUALITYANALYSIS:
    name: Deploy in QA
    runs-on: ubuntu-latest
    environment: QA
    needs: DEVELOPMENT
    steps:
      - name: Download ZIP Artifact
        uses: actions/download-artifact@v3
        with:
          name: web-artifact
          path: web-release

      - name: 📂 Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./web-release/
          exclude: |
            **/.git*
            **/.git*/**

      - name: SSH into the server and unzip web-release.zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            yes | unzip web-release.zip -d web-release
          EOF

      - name: Copy all files from web-release directory
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            rsync -av web-release/ . #recursively copy files
          EOF
          
      - name: Remove the 'web-release' directory and .zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            rm -rf web-release
            rm -rf .git
            rm web-release.zip
          EOF

  PRODUCTION:
    name: Deploy in PROD
    runs-on: ubuntu-latest
    environment: PROD    
    needs: QUALITYANALYSIS
    steps:
      - name: Download ZIP Artifact
        uses: actions/download-artifact@v3
        with:
          name: web-artifact
          path: web-release

      - name: 📂 Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./web-release/
          exclude: |
            **/.git*
            **/.git*/**

      - name: SSH into the server and unzip web-release.zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            yes | unzip web-release.zip -d web-release
          EOF

      - name: Copy all files from web-release directory
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            rsync -av web-release/ . #recursively copy files
          EOF

      - name: Remove the 'web-release' directory and .zip
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}" << 'EOF'
            cd "${{ secrets.FTP_SERVER }}"
            rm -rf web-release
            rm -rf .git
            rm web-release.zip
          EOF
            
